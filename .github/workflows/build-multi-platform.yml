name: Multi-Platform Build and Publish

on:
  workflow_call:
    inputs:
      registry:
        description: 'Target registry for the image'
        type: string
        required: true
        default: 'docker.io'
      username:
        description: 'Username to login to the registry'
        type: string
        required: true
        default: ${{ github.repository_owner }}
      registry-image:
        description: 'Name of the image incl. registry, e.g. "octocat/HelloWorld" for Docker Hub or "ghcr.io/octocat/HelloWorld" for GHCR'
        type: string
        required: true
        default: ${{ github.repository }}
      platforms:
        description: 'Target platforms in JSON list syntax, e.g. [ "linux/amd64", "linux/arm/v7" ]'
        type: string
        required: true
        default: '[ "linux/amd64", "linux/arm/v7" ]'
      build-context:
        description: 'Build context for the image'
        type: string
        default: .
      build-args:
        description: 'Build arguments for the image in JSON list syntax, e.g. [ "ARG1=foo", "ARG2=bar" ]'
        type: string
      fail-fast:
        description: 'Cancel all jobs if any job fails?'
        type: boolean
        default: true
    secrets:
      password:
        description: 'Password or token to login to the registry'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.registry-image }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.username }}
          password: ${{ secrets.password }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.build-context }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ inputs.registry-image }},push-by-digest=true,name-canonical=true,push=true,annotation-index.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}
          build-args: ${{ join(fromJSON(inputs.build-args), fromJSON('"\n"')) }}
      -
        name: Export digest
        env:
          digest: ${{ steps.build.outputs.digest }}
        run: |
          mkdir -p /tmp/digests
          touch "/tmp/digests/${digest#sha256:}"
      -
        name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.registry-image }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.username }}
          password: ${{ secrets.password }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        env:
          image: ${{ inputs.registry-image }}
          json: ${{ steps.meta.outputs.json }}
        run: |
          docker buildx imagetools create \
            $(echo "${json}" | jq -cr '.tags | map("-t " + .) | join(" ")') \
            $(printf "${image}@sha256:%s " *)
      -
        name: Inspect image
        env:
          image: ${{ inputs.registry-image }}
          version: ${{ steps.meta.outputs.version }}
        run: |
          docker buildx imagetools inspect "${image}:${version}"
